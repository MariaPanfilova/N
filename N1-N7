#include 'prototypes.h"
#include "struct.h"

/*N-1: comparisson of two natural numbers 
if the first one is bigger than the second one-2, if they are equal-0, otherwise-1*/
int COM_NN_D (N *a, N *b) // a- the first number b - the second number 
{
    int i, res,t, count;
    t=1;
    count=0;
    if (a->n>b->n) res=2;
    if (a->n<b->n) res=1;
    if (a->n==b->n)
    {
        for (i = a->n-1; i>=0 && t!=0; i--)
        {
            if (a->A[i]>b->A[i])
            {
                res=2;
                t=0;
            }
            else if (a->A[i]<b->A[i])
            {
                res=1;
                t=0;
            }
            else count++;
        }
    if (count==a->n) res=0;
    }
    return res;
}

/*N-2: checks if the number equals zero 
1-yes 0-no*/
int NZER_N_B (N *a)
{
    int i, res, count;
    count=0;
    res=0;
    for (i=a->n-1; i>=0; i--)
        {
            if (a->A[i]==0) count++;
        }
    if (count==a->n) res=1; //1-yes 0-no
    return res;
}

/*N-3: adds 1 to the natural number*/
void ADD_1N_N (N *a)
{
    int i,t;
    i=0;
    t=1;
    a->A[a->n]=0;
    while (t!=0)
    {
        if (a->A[i]!=9)
        {
            a->A[i]++;
            t=0;
        }
        else
        {
            a->A[i]=0;
            i++;
        }
    }
}

/*N-4: adding two natural numbers*/
N* ADD_NN_N (N *a, N *b) //v.0.0
{
    int i,s;
    N *S=NULL, *tmp=NULL;
    s=0;

    printf("a=%p, b=%p\n",a,b);
    printf("an=%d, bn=%d\n",a->n,b->n);
    if (COM_NN_D(a,b)==1)
    {
        tmp=(N*)malloc(sizeof(N));
        if (tmp)
        {
            if (COM_NN_D(a,b)==1)
            {
                tmp=a;
                a=b;
                b=tmp;
            }
        }
    }
    printf("a=%p, b=%p\n",a,b);
    printf("an=%d, bn=%d\n",a->n,b->n);

    S=(N*)malloc(sizeof(N));
    if(S)
    {
        S->A=(int*)calloc(a->n+1,sizeof(int));
        S->n=a->n+1;
        if (S->A)
        {
            for (i=0;i<b->n;i++)
            {
                S->A[i]=(a->A[i]+b->A[i]+s)%10;
                s=(a->A[i]+b->A[i]+s)/10;
                printf("si=%d, s=%d\n",S->A[i],s);
            }
            printf("s1=%d, s=%d\n",S->A[i],s);
            if ((b->n)<(a->n))
            {
                while (i<a->n)
                {
                    S->A[i]=(a->A[i]+s)%10;
                    s=(a->A[i]+s)/10;
                    i++;
                    printf("si=%d, s=%d\n",S->A[i],s);
                }
            }
            S->A[i]=s;
            if (S->A[i]==0)
            {
                realloc(S->A,a->n-1);
                S->n--;
            }
            printf("i=%d\n",i);
        }
        else
        {
            free(S->A);
            S->A=NULL;
        }
    }
    return S;
}

/*N-5: Subtracting from the first natural number of the second which is less or equal (но это не точно)*/
N* SUB_NN_N (N *a, N *b)
{
    N *S=NULL;
    int i,t;
    t=0;
    S=(int*)malloc(sizeof(N)); 
    if(S)
    {
        S->A = (int*)calloc(a->n,sizeof(int));
        if (S->A)
        {
            if(COM_NN_D(a, b)==2)
            {
                for (i=0; i<a->n-1; i++)
                {
                    if (a->A[i]-t>=b->A[i])
                    {
                        S->A[i]=(a->A[i]-b->A[i]-t);
                        t=0;
                    }
                    else
                    {
                        S->A[i]=(a->A[i]+10-b->A[i]);
                        t=1;
                    }
                }
            }
        }
    }
    return S;
}

/*N-6: multiplies number by digit (но это не точно)*/
N* MUL_ND_N (N *a, int num)
{
    N *S=NULL;
    int i,t;
    t=0;
    S=(int*)malloc(sizeof(N));
    if(S)
    {
        S->A = (int*)calloc(a->n,sizeof(int));
        if (S->A)
        {
            for (i=0; i<a->n-1; i++)
            {
                S->A[i]=(a->A[i]*num+t)%10;
                t=(a->A[i]*num)/10;
            }
            if (t>0) S->A[a->n]=t;
        }
    }
    return S;
}

/*N-7: multiplies number by 10^k (но это не точно)*/
N* MUL_Nk_N (N *a, int k)
{
    N *S=NULL;
    int i;
    S=(int*)malloc(sizeof(N));
    if(S)
    {
        S->A = (int*)calloc(a->n+k,sizeof(int));
        if (S->A)
        {
            S->n=a->n+k;
            for (i=a->n-1; i>=0; i--)
            {
                S->A[i+k]=a->A[i];
            }
            for (i=0; i<k; i++)
            {
                S->A[i]=0;
            }
        }
    }
    return S;
}
